- name: Update apt cache if needed
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  when: ansible_facts.pkg_mgr == 'apt'
- name: Ensure skopeo is installed on router
  ansible.builtin.package:
    name: skopeo
    state: present
  when: '''k3srouter_host'' in group_names'
- name: Ensure jq is installed
  ansible.builtin.package:
    name: jq
    state: present
- name: Show loaded values (password masked)
  ansible.builtin.debug:
    msg:
    - 'dockerhub_registry: {{ dockerhub_registry | default(''UNDEFINED'') }}'
    - 'dockerhub_username: {{ dockerhub_username | default(''UNDEFINED'') }}'
    - 'dockerhub_password: **** (masked)'
    - 'kubeconfig: {{ kubeconfig | default(''UNDEFINED'') }}'
  run_once: true
- name: Assert required vars are present and non-empty
  ansible.builtin.assert:
    that:
    - dockerhub_registry is defined
    - (dockerhub_registry | string) | length > 0
    - dockerhub_username is defined
    - (dockerhub_username | string) | length > 0
    - dockerhub_password is defined
    - (dockerhub_password | string) | length > 0
    - kubeconfig is defined
    - (kubeconfig | string) | length > 0
    fail_msg: 'Missing required variables. Ensure ../group_vars/dockerhub.yml defines:
      dockerhub_registry, dockerhub_username, dockerhub_password, kubeconfig

      '
  run_once: true
- name: Probe registry (expect 200 OK or 401 Auth challenge)
  ansible.builtin.uri:
    url: https://registry-1.docker.io/v2/
    method: HEAD
    status_code:
    - 200
    - 401
    return_content: false
  register: hub_probe
  changed_when: false
- name: Show probe result
  ansible.builtin.debug:
    msg:
    - 'Reachable: {{ hub_probe.status in [200, 401] }}'
    - 'HTTP: {{ hub_probe.status }}'
    - 'Auth header: {{ hub_probe.www_authenticate | default(''n/a'') }}'
- name: Login to Docker Hub with skopeo (token)
  ansible.builtin.shell: 'set -euo pipefail

    skopeo login docker.io -u "{{ dockerhub_username }}" -p "{{ dockerhub_password
    }}" 1>/dev/null

    '
  args:
    executable: /bin/bash
  changed_when: false
- name: Confirm login
  ansible.builtin.debug:
    msg: skopeo login succeeded for {{ dockerhub_username }}
- name: Ensure work dir exists on router (for outputs)
  ansible.builtin.file:
    path: '{{ work_dir }}'
    state: directory
    mode: '0755'
  delegate_to: k3srouter
  run_once: true
- name: Collect unique images from all namespaces
  ansible.builtin.shell: "set -euo pipefail\nif command -v kubectl >/dev/null 2>&1;\
    \ then K=kubectl; else K='k3s kubectl'; fi\nif [ -n \"{{ kubeconfig | default('')\
    \ }}\" ] && [ -f \"{{ kubeconfig | default('') }}\" ]; then\n  KUBECONFIG=\"{{\
    \ kubeconfig }}\" $K get pods -A -o json \\\n  | jq -r '.items[] | (.spec.containers[]?.image,\
    \ .spec.initContainers[]?.image)' \\\n  | grep -v '^null$' | sort -u\nelse\n \
    \ $K get pods -A -o json \\\n  | jq -r '.items[] | (.spec.containers[]?.image,\
    \ .spec.initContainers[]?.image)' \\\n  | grep -v '^null$' | sort -u\nfi\n"
  args:
    executable: /bin/bash
  register: raw_images
  changed_when: false
- name: Write raw image list on router (images.txt)
  ansible.builtin.copy:
    dest: '{{ images_list_file }}'
    mode: '0644'
    content: '{{ (raw_images.stdout_lines | default([])) | join(''

      '') }}

      '
  delegate_to: k3srouter
  run_once: true
- name: Build parsed JSON map on router (name, tag, hub_repo, hub_ref)
  ansible.builtin.shell: "set -euo pipefail\npython3 - <<'PY'\nimport os, json\nsrc\
    \   = os.environ[\"SRC_FILE\"]\npref  = os.environ[\"HUB_PREFIX\"]\nreg   = os.environ[\"\
    REG_HOST\"]\n\ndef split_ref(ref: str):\n  digest = None\n  if \"@sha256:\" in\
    \ ref:\n    ref, digest = ref.split(\"@\", 1)\n  last = ref.rsplit(\"/\", 1)[-1]\n\
    \  if \":\" in last:\n    name, tag = ref.rsplit(\":\", 1)\n  else:\n    name,\
    \ tag = ref, \"latest\"\n  base = name.split(\"/\")[-1]\n  return {\"source\"\
    : ref, \"name\": base, \"tag\": tag, \"digest\": digest}\n\nwith open(src) as\
    \ f:\n  lines = [l.strip() for l in f if l.strip()]\n\nout = []\nfor ref in lines:\n\
    \  o = split_ref(ref)\n  hub_repo = f\"{pref}/{o['name']}\"\n  hub_ref  = f\"\
    {reg}/{hub_repo}:{o['tag']}\"\n  o.update({\"hub_repo\": hub_repo, \"hub_ref\"\
    : hub_ref})\n  out.append(o)\n\nprint(json.dumps(out, indent=2))\nPY\n"
  args:
    executable: /bin/bash
  environment:
    SRC_FILE: '{{ images_list_file }}'
    HUB_PREFIX: '{{ hub_repo_prefix_effective }}'
    REG_HOST: '{{ registry_host_effective }}'
  register: parsed_json
  changed_when: false
  delegate_to: k3srouter
  run_once: true
- name: Save images_parsed.json on router
  ansible.builtin.copy:
    dest: '{{ images_parsed_json }}'
    mode: '0644'
    content: '{{ parsed_json.stdout }}'
  delegate_to: k3srouter
  run_once: true
- name: Summary of discovered images
  ansible.builtin.debug:
    msg:
    - Found {{ (raw_images.stdout_lines | default([])) | length }} unique images.
    - 'Raw list: {{ images_list_file }}'
    - 'Parsed map: {{ images_parsed_json }}'
- name: Ensure images_parsed.json exists
  ansible.builtin.stat:
    path: '{{ images_parsed_json }}'
  register: parsed_stat
- name: Fail with hint if missing
  ansible.builtin.fail:
    msg: Missing {{ images_parsed_json }}. Run Stage 3 first (collect images).
  when: not parsed_stat.stat.exists
- name: Load parsed images (from Stage 3)
  ansible.builtin.slurp:
    src: '{{ images_parsed_json }}'
  register: parsed_b64
- name: Filter to wanted images only
  ansible.builtin.set_fact:
    candidates: "{{\n  (parsed_b64.content | b64decode | from_json)\n  | selectattr('name','in',\
      \ wanted_names) | list\n}}"
- name: Show candidates
  ansible.builtin.debug:
    msg:
    - 'Candidates ({{ candidates | length }}):'
    - '{{ candidates }}'
- name: End play if no candidates
  meta: end_play
  when: (candidates | length) == 0
- name: Get source digests
  ansible.builtin.shell: 'set -euo pipefail

    src="docker://{{ item.source }}"

    skopeo inspect "${src}" | jq -r ''.Digest // .digest // (.manifests[0].digest
    // "")''

    '
  args:
    executable: /bin/bash
  loop: '{{ candidates }}'
  loop_control:
    label: '{{ item.source }}'
  register: src_digests
  changed_when: false
- name: Get destination digests (if exist)
  ansible.builtin.shell: "set -euo pipefail\ndest=\"docker://{{ registry_host_effective\
    \ }}/{{ hub_repo_prefix_effective }}/{{ item.name }}:{{ item.tag }}\"\nif skopeo\
    \ inspect \"${dest}\" >/dev/null 2>&1; then\n  skopeo inspect \"${dest}\" | jq\
    \ -r '.Digest // .digest // (.manifests[0].digest // \"\")'\nelse\n  echo \"\"\
    \nfi\n"
  args:
    executable: /bin/bash
  loop: '{{ candidates }}'
  loop_control:
    label: '{{ item.name }}:{{ item.tag }}'
  register: dst_digests
  changed_when: false
- name: Initialize push_plan
  ansible.builtin.set_fact:
    push_plan: []
- name: Append each entry to push_plan (by index)
  ansible.builtin.set_fact:
    push_plan: '{{ push_plan + [ { ''name'': candidates[idx].name, ''tag'': candidates[idx].tag,
      ''source'': candidates[idx].source, ''dest'': ''docker://'' ~ registry_host_effective
      ~ ''/'' ~ hub_repo_prefix_effective ~ ''/'' ~ candidates[idx].name ~ '':'' ~
      candidates[idx].tag, ''src_digest'': (src_digests.results[idx | int].stdout
      | default('''') | trim), ''dst_digest'': (dst_digests.results[idx | int].stdout
      | default('''') | trim), ''status'': ((dst_digests.results[idx | int].stdout
      | default('''') | trim) != '''') | ternary(''EXISTS'',''MISSING''), ''action'':
      ((dst_digests.results[idx | int].stdout | default('''') | trim) == '''') | ternary(''push'',
      (((dst_digests.results[idx | int].stdout | default('''') | trim) != (src_digests.results[idx
      | int].stdout | default('''') | trim)) | ternary(''replace'',''nothing'')))
      } ] }}'
  loop: '{{ range(0, (candidates | length)) | list }}'
  loop_control:
    loop_var: idx
    label: '{{ candidates[idx].name }}:{{ candidates[idx].tag }}'
- name: Save push plan (for auditing)
  ansible.builtin.copy:
    dest: '{{ work_dir }}/push_plan.json'
    mode: '0644'
    content: '{{ push_plan | to_nice_json }}'
  changed_when: false
- name: Execute copy for push/replace
  ansible.builtin.shell: 'set -euo pipefail

    skopeo copy --all "docker://{{ item.source }}" "{{ item.dest }}"

    '
  args:
    executable: /bin/bash
  loop: '{{ push_plan }}'
  loop_control:
    label: '{{ item.dest }} ({{ item.action }})'
  when: item.action in ['push','replace']
  register: copy_res
  changed_when: item.action in ['push','replace']
- name: Optionally also push :latest tag
  ansible.builtin.shell: "set -euo pipefail\nskopeo copy --all \"docker://{{ item.source\
    \ }}\" \\\n  \"docker://{{ registry_host_effective }}/{{ hub_repo_prefix_effective\
    \ }}/{{ item.name }}:latest\"\n"
  args:
    executable: /bin/bash
  loop: '{{ push_plan }}'
  loop_control:
    label: '{{ item.name }}:latest'
  when: ensure_latest_tag_effective and item.action in ['push','replace']
  changed_when: false
- name: Summary by action
  ansible.builtin.debug:
    msg:
    - 'Total candidates: {{ push_plan | length }}'
    - 'Push: {{ (push_plan | selectattr(''action'',''equalto'',''push'') | list) |
      length }}'
    - 'Replace: {{ (push_plan | selectattr(''action'',''equalto'',''replace'') | list)
      | length }}'
    - 'Nothing: {{ (push_plan | selectattr(''action'',''equalto'',''nothing'') | list)
      | length }}'
