- name: Assert required vars exist
  ansible.builtin.assert:
    that:
    - INFLUXDB_ADMIN_TOKEN is defined
    - influx_url is defined and influx_url | length > 0
    fail_msg: Missing INFLUXDB_ADMIN_TOKEN in ../vars.yml or influx_url not set.
- name: Get organizations (quiet)
  no_log: true
  ansible.builtin.uri:
    url: '{{ influx_url }}/api/v2/orgs?limit={{ per_page_limit }}'
    method: GET
    headers:
      Authorization: Token {{ INFLUXDB_ADMIN_TOKEN }}
    return_content: true
    status_code: 200
  register: orgs_resp
- name: Extract orgs
  changed_when: false
  ansible.builtin.set_fact:
    influx_orgs: '{{ orgs_resp.json.orgs | default([]) }}'
- name: Fetch buckets per org (quiet)
  no_log: true
  ansible.builtin.uri:
    url: '{{ influx_url }}/api/v2/buckets?limit={{ per_page_limit }}&org={{ item.name
      | urlencode }}'
    method: GET
    headers:
      Authorization: Token {{ INFLUXDB_ADMIN_TOKEN }}
    return_content: true
    status_code: 200
  loop: '{{ influx_orgs }}'
  loop_control:
    label: '{{ item.name }}'
  register: buckets_per_org
- name: Build summary (org â†’ buckets)
  block:
  - name: Silent summary builder
    no_log: true
    changed_when: false
    ansible.builtin.set_fact:
      influx_summary: "{{ influx_summary | default([]) +\n   [ {\n       'org': item.item.name,\n\
        \       'org_id': item.item.id,\n       'buckets': (item.json.buckets | default([]))\
        \ | map(attribute='name') | list\n     } ] }}"
    loop: '{{ buckets_per_org.results }}'
    loop_control:
      label: '{{ item.item.name }}'
- name: Print orgs and buckets (clean)
  changed_when: false
  ansible.builtin.debug:
    msg: 'Org: {{ item.org }} ({{ item.org_id }})

      Buckets: {% if item.buckets | length == 0 %}-{% else %}{{ item.buckets | join('',
      '') }}{% endif %}

      '
  loop: '{{ influx_summary }}'
  loop_control:
    label: '{{ item.org }}'
- name: Build org/bucket pairs
  changed_when: false
  ansible.builtin.set_fact:
    org_bucket_pairs: '{{ (org_bucket_pairs | default([])) + [ {''org'': item.0.org,
      ''bucket'': item.1} ] }}'
  loop: '{{ query(''subelements'', influx_summary, ''buckets'') }}'
  loop_control:
    label: '{{ item.0.org }} / {{ item.1 }}'
- name: Raw query per bucket (last 2h, distinct fields)
  changed_when: false
  ansible.builtin.uri:
    url: '{{ influx_url }}/api/v2/query?org={{ item.org | urlencode }}'
    method: POST
    headers:
      Authorization: Token {{ INFLUXDB_ADMIN_TOKEN }}
      Accept: application/csv
      Content-Type: application/vnd.flux
    return_content: true
    status_code: 200
    body: "from(bucket: \"{{ item.bucket }}\")\n  |> range(start: -2h)\n  |> keep(columns:\
      \ [\"_measurement\",\"_field\"])\n  |> group(columns: [\"_measurement\",\"_field\"\
      ])\n  |> distinct(column: \"_field\")\n  |> sort(columns: [\"_measurement\"\
      ,\"_field\"])\n  |> limit(n: 50)\n"
  loop: '{{ org_bucket_pairs }}'
  loop_control:
    label: '{{ item.org }} / {{ item.bucket }}'
  register: raw_query_per_bucket
- name: Print raw CSV (first 40 lines) per bucket
  changed_when: false
  ansible.builtin.debug:
    msg: '=== {{ item.item.org }} / {{ item.item.bucket }} ===

      {{ (item.content.splitlines() | list)[:40] | join(''\n'') }}

      '
  loop: '{{ raw_query_per_bucket.results }}'
  loop_control:
    label: '{{ item.item.org }} / {{ item.item.bucket }}'
